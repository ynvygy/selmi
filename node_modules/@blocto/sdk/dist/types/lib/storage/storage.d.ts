import { KEY_SESSION, CHAIN } from '../../constants';
export interface ProviderSession {
    code?: string | null;
    accounts: Partial<Record<CHAIN, string[] | undefined>>;
    evm: {
        [chainName: string]: string[] | undefined;
    };
}
export interface AccountStorage {
    expiry: number;
    v: string;
    data: ProviderSession;
}
export declare const getItem: <T>(key: string, defaultValue?: T | null) => T | null;
export declare const getRawItem: (key: string) => string | null;
export declare const setItem: (key: string, value: unknown) => void;
export declare const removeItem: (key: string) => void;
/**
 * @param {KEY_SESSION} key - key to retrieve the data
 * @returns {ProviderSession | null} ProviderSession | null
 * @description
 * Get ProviderSession from storage.
 * If the data is expired, will remove the data and return null
 */
export declare const getAccountStorage: (key: KEY_SESSION) => ProviderSession | null;
/**
  @param {KEY_SESSION} key - key to store the data
  @param {ProviderSession} data - Only the part of ProviderSession that needs to be updated
  @param {number} expiry - expiry time of the data
*/
export declare const setAccountStorage: (key: KEY_SESSION, data: Partial<ProviderSession>, expiry?: number) => void;
export declare const getChainAddress: (key: KEY_SESSION, chain: CHAIN) => string[] | null;
export declare const setChainAddress: (key: KEY_SESSION, chain: CHAIN, account: string[]) => void;
export declare const removeChainAddress: (key: KEY_SESSION, chain: string) => void;
export declare const getEvmAddress: (key: KEY_SESSION, chain: string) => string[] | null;
export declare const setEvmAddress: (key: KEY_SESSION, chain: string, accounts: string[]) => void;
export declare const removeAllEvmAddress: (key: KEY_SESSION) => void;
